spring:
  servlet:
    multipart:
      max-file-size: 200MB
      max-request-size: 200MB
  datasource:
    url: jdbc:postgresql://localhost:5432/rapidpass
    username: dctx
    password: password
  jpa:
    hibernate:
      ddl-auto: none
  jackson:
    serialization:
      WRITE_DATES_AS_TIMESTAMPS: false
    date-format: ph.devcon.rapidpass.utilities.RFC3339DateFormat
  #    default-property-inclusion: non_empty
  mail:
    host: smtp.mailgun.org
    port: 587
    username: ''
    password: ''
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  kafka:
    bootstrap-servers: localhost:9092
#    bootstrap-servers: rapidpass-kafka.eastasia.azurecontainer.io:9092
    consumer:
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      group-id: rapidrequest_group
    producer:
      bootstrap-servers: localhost:9092
#      bootstrap-servers: rapidpass-kafka.eastasia.azurecontainer.io:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

  # needed for keycloak to override some security beans
  main:
    allow-bean-definition-overriding: true

topic:
  new-requests: rapidpass-requests
  new-registrar-user-requests: rapidpass-approver-requests
  approval-notifications: rapidpass-approvals
  rapidpass-events: rapidpass-events
  partitions-num: 3
  replication-factor: 1

kafka:
  enabled: false # enables or disables kafka event processing

springfox:
  documentation:
    swagger:
      v2:
        path: /api-docs

# These are the API credentials for Semaphore.
#   These are currently unused, as the notification service is responsible for sending messages whether SMS or email.
semaphore:
  # The URL to perform the API request for semaphore.
  url: https://api.semaphore.co/api/v4/messages
  # The API key that authenticates use of semaphore.
  key: ''

server:
  servlet:
    context-path: /api/v1

# General configuration related to rapid pass.
rapidpass:
  # Deprecated - We delegate all authentication related services to Keycloak. All the properties below are unused.
  auth:
    apiKey:
      enabled: true
      key: dctx
  # The expiration configuration determines the default `valid_to` expiration date value to assign to new RapidPasses.
  expiration:
    year: 2020
    month: 5
    day: 15
  # Determines the URL for the checkpoint install/upgrade API endpoints.
  checkpointApkUrl: https://www.google.com/rapidpass-checkpoint-v1.4.apk
  # A precomputed SHA1 hash for the file found on the URL. You can use http://onlinemd5.com/ to compute the SHA1 file.
  checkpointApkHash: ABCDEF1234567890
  # The version for this checkpoint app found on the URL and hash.
  checkpointApkVersion: 1.4.0

# An configuration setting that easily allows the API server to toggle the accessibility of certain endpoints.
#   This is still in-use, but technically can be improved by moving to RBAC through Keycloak.
endpointswitch:
  checkpoint:
    auth: true
  batch:
    accesspasses: false
  registry:
    accesspasses: false

# The QR Master application configuration holds information used to generate the QR.
qrmaster:
  # There are four important fields.
  #   1. The Master Key is a secret key which only the PNP and DCTx have a physical copy of. They printed it on a
  #      piece of paper, and the newly installed scanner devices scan it and that's what authorizes them as valid
  #      scanner devices.
  #   2. The Signing Key is used by the checkpoint team.
  #   3. The Encryption Key is used by the checkpoint team.
  #   4. The Valid To is the validity date for this master key, signing key, and encryption key. Changing this allows you
  #      to rotate the above-mentioned keys.

  # There can be multiple response keys. This is in case we want to do key rotations.

  # The format for responseKeys is the following:
  # Master Key,Signing Key,Encryption Key,Valid To
  responseKeys[0]: ${RAPIDPASS_MASTER_KEY},${RAPIDPASS_QRMASTER_SKEY},${RAPIDPASS_ENCRYPTION_KEY},${RAPIDPASS_VALID_TO}
  # The control key of this
  controlkey: ${RAPIDPASS_QRMASTER_CONTROLKEY}

# The Keycloak API configuration specifies the authentication of the API server with Keycloak. This user account is
#   involved in creating new users in Keycloak (for registering new Scanner Devices). Make sure that this user in
#   Keycloak has the realm role of `manage-users`, which allows it to create new users.
keycloak-api:
  apiUsername: scanner-registrar@rapidpass.ph
  apiPassword: scanner-registrar@rapidpass.ph

# Keycloak related connection details. This can be retrieved by accessing keycloak, accessing the correct realm for
#   your environment, selecting the `rapidpass-api` client, and looking under 'Installation'.
keycloak: # override me in env vars!
  auth-server-url: http://localhost:8180/auth/
  realm: rapidpass
  resource: rapidpass-api
  ssl-required: external
  bearer-only: true
  cors: true
  credentials.secret: '**********'
  # The first security constraints exposes all public endpoints which do not require the Authentication header.
  securityConstraints[0]:
    securityCollections[0]:
      name: OpenAPI Configuration
      patterns[0]: /swagger-ui.html
      patterns[1]: /registry/qr-codes/*
      patterns[2]: /checkpoint/auth
      patterns[3]: /checkpoint/register
  # The following security constraints detail the secured endpoints.
  #   To be able to access any of the secured endpoints on the API server, you must have any of the following realm
  #   roles: user, approver, inspector.
  securityConstraints[1]:
    authRoles[0]: user
    authRoles[1]: approver
    authRoles[2]: inspector
    securityCollections[0]:
      name: secured endpoints
      patterns[0]: /registry/*
      patterns[1]: /registry/access-passes/*
      patterns[2]: /batch/*
      patterns[3]: /tester/*
      patterns[4]: /users/*
      patterns[5]: /lookup/*
      patterns[6]: /checkpoint/*

#  policy-enforcer-config:
#    lazy-load-paths: true
#    paths[0]:
#      path: /checkpoint/*
#    paths[1]:
#      path: /registry/*
#      methods[0]:
#        method: GET
#        scopes[0]: view
#      methods[1]:
#        method: POST
#        scopes[0]: create
#      methods[2]:
#        method: PUT
#        scopes[0]: approve
#      methods[3]:
#        method: PATCH
#        scopes[0]: suspend

logging:
  level:
    ph.devcon: debug
    org:
      springframework:
        security: debug
      keycloak: debug