openapi: 3.0.0
servers:
  - url: /api/v1
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/tiongks/RapidPass/1.0.0
info:
  description: >-
    API for Rapid Pass Web Services. Guys, currently super simple pass ng API.
    Please send Merge Requests to update details. Thanks!
  version: "1.0.0"
  title: RapidPass API
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: inspector
    description: Endpoints for inspector app
  - name: registration
    description: Endpoints for mobile registraation app
  - name: dashboard
    description: Endpoints for web console for the review and approval of requests
  - name: public
    description: Publicly accessible endpoint (future)
  - name: bulk
    description: bulk/batch operations
paths:
  /registry/auth:
    post:
      tags:
        - dashboard
      summary: >-
        Authentication for Dashboard users. This allows access to the APIs for
        approvals
      operationId: loginAgency
      description: >-
        Called from the dashboard. When successful, an Auth Token will be returned
        which can be used for the approvals API.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardAuthRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardAuthResponse'
        '401':
          description: Incorrect username or password
        '403':
          description: Bad Request
        '500':
          description: Internal Server Error
  /registry/access-passes:
    post:
      tags:
        - registration
        - dashboard
      summary: >-
        Creates a request for a new RapidPass, can be for INDIVIDUAL or VEHICLE
        depending on pass type
      operationId: requestAccessPass
      description: >
        Called from the registration or web site registration page to register a user.
        All new access passes will have a status of 'pending'.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RapidPassRequest'
        description: Rapid Pass request payload.
      responses:
        '201':
          description: Request created
          content:
            application/json:
              schema:
                type: object
                properties:
                  schema:
                    $ref: '#/components/schemas/RapidPass'
          links:
            GetAccessPassById:
              operationId: getAccessPassById
              parameters:
                referenceId: '$response.body#/referenceId'
        '400':
          description: Invalid Input
    get:
      tags:
        - dashboard
      summary: Gets a list of access passes
      parameters:
        - name: queryFilter
          in: query
          required: false
          description: query parameters for the records that will be returned by the server
          schema:
            $ref: '#/components/schemas/QueryFilter'
      responses:
        '200':
          description: Status of the request pass
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RapidPass'
      description: Retrieves a set of access passes based on the optional query parameters.  If there are no query parameters provide, a paginated list of access passes will be returned.
  /batch/access-passes:
    get:
      tags:
        - dashboard
        - inspector
        - bulk
      summary: downloads a list of access passes in csv format
      parameters:
        - name: compressed
          in: query
          description: 'specifies whether to compress the csv file or not, default is false'
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Download initiated.
          content:
            text/csv:
              schema:
                type: string
                format: byte[]
                description: csv file containing all valid access passes
    post:
      tags:
        - dashboard
        - bulk
      summary: Upload CSV file of pre-approved passes
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Upload successful
  /batch/scanner-devices:
    get:
      tags:
        - dashboard
        - bulk
      summary: downloads a list of mobile devices in csv format
      responses:
        '200':
          description: Download initiated.
          content:
            text/csv:
              schema:
                type: string
                format: byte[]
                description: csv file containing all registered mobile devices
    post:
      tags:
        - dashboard
        - bulk
      summary: upload CSV file mobile devices for registration
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Upload successful
  /registry/access-passes/{referenceID}:
    get:
      operationId: getAccessPassById
      tags:
        - inspector
        - registration
        - dashboard
      summary: Get information about an access pass
      parameters:
        - name: referenceID
          in: path
          description: >-
            Reference Number of Access Pass request.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: More information on control number
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RapidPass'
    put:
      tags:
        - dashboard
      summary: Approves or Declines a Rapid Pass request
      parameters:
        - name: referenceID
          in: path
          description: >-
            Reference ID of the access pass request, mobile number for
            individuals and plate numbers for vehicles
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RapidPass'
      responses:
        '200':
          description: >-
            approves or declines the Rapid Pass Request with the same referenced ID and control number,
            this will generate a control code in system and send notifications to the Requestor
            along with QR code if the request is approved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RapidPass'
          links:
            GetAccessPassById:
              operationId: getAccessPassById
              parameters:
                referenceId: '$response.body#/referenceId'
    delete:
      tags:
        - dashboard
      summary: Suspends an active access pass
      parameters:
        - name: referenceID
          in: path
          description: >-
            Reference ID of the access pass request, mobile number for
            individuals and plate numbers for vehicles
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            approves the Rapid Pass Request with referenced reference Number.
            Will generate a control code in system and send notifications to
            Requestor along with QR code.

  '/registry/qr-codes/{referenceID}':
    get:
      operationId: getQRCode
      tags:
        - inspector
        - registration
        - dashboard
      summary: Retrieve the base64-encouded QR code
      parameters:
        - name: referenceID
          in: path
          description: >-
            Reference ID of the access pass request, mobile number for
            individuals and plate numbers for vehicles
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Base64-encoded string of the QR Code
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: reference number not found
  '/checkpoint/auth':
    post:
      operationId: checkpointAuth
      tags:
        - inspector
      summary: Authenticate a checkpoint device. This will provide the device with the necessary keys needed to decode the scanned QR data.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckpointAuthRequest'
      responses:
        '200':
          description: success request returns the QR secret and the JWT access code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckpointAuthResponse'
        '400':
          description: ivalid request, imei and masterKey is required
        '401':
          description: Unauthorized. Either the imei provide is not registered or the masterKey provided is wrong
  '/checkpoint/access-passes/plate-numbers/{plateNo}:':
    get:
      operationId: verifyPlateNo
      tags:
        - inspector
        - public
      summary: Verify if the plate number is registered or not
      parameters:
        - name: plateNo
          in: path
          description: >-
            Vehicle's plate number
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Rapid Pass retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RapidPass'
        '404':
          description: RapidPass not found using the plate number.

  '/checkpoint/access-passes/control-codes/{controlCode}':
    get:
      operationId: verifyControlCode
      tags:
        - inspector
        - public
      summary: Verify if the plate number is registered or not
      parameters:
        - name: controlCode
          in: path
          description: >-
            Vehicle's plate number
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Rapid Pass retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RapidPass'
        '404':
          description: RapidPass not found using the plate number.
  '/registry/scanner-devices':
    post:
      tags:
        - inspector
        - dashboard
      summary: registers a new mobile device for use in checkpoints
      operationId: registerScannerDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MobileDevice'
        description: mobile device configuration
      responses:
        '201':
          description: mobile device registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  deviceId:
                    type: string
          links:
            GetAccessPassById:
              operationId: getAccessPassById
              parameters:
                referenceId: '$response.body#/deviceId'
        '400':
          description: Invalid Input
    get:
      tags:
        - dashboard
      summary: gets a list of registered mobile devices
      operationId: getScannerDevices
      parameters:
        - name: status
          in: query
          required: false
          description: status of mobile devices to retrieve
          schema:
            type: string
      responses:
        '200':
          description: successful mobile/scanner device operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MobileDevice'
      description: Retrieves a set of registered mobile devices based on the optional query parameters.
  '/registry/sanner-devices/{deviceId}':
    get:
      tags:
        - dashboard
        - inspector
      summary: get details of a registered mobile devices
      operationId: getScannerDeviceDetails
      parameters:
        - name: deviceId
          in: path
          required: true
          description: unique mobile devices identifier
          schema:
            type: string
      responses:
        '200':
          description: successful retrieval of mobile device information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MobileDevice'
        '400':
          description: device not found

components:
  schemas:
    RapidPassRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/CommonRapidPassFields'
      properties:
        firstName:
          type: string
          description: The first name of the individual that will use the access pass
          example: Juan
        middleName:
          type: string
          description: The middle name of the individual that will use the access pass
          example: Mercedes
        lastName:
          type: string
          description: The last name of the individual that will use the access pass
          example: de la Cruz
        suffix:
          type: string
          description: The suffix of the individual that will use the access pass
          example: III
        company:
          type: string
          description: company of access pass holder
        mobileNumber:
          type: string
          description: mobile number of access pass holder
          example: '+639991230000'
        email:
          type: string
          description: email address of access pass holder
          example: jdelacruz@some-email.com
        originName:
          type: string
          description: source company name
          example: Acme Inc.
        originStreet:
          type: string
          description: source street address
          example: '123 Somewhere Ave'
        originCity:
          type: string
          description: source city
          example: 'Makati City'
        destName:
          type: string
          description: destination location
          example: Zuelig Building
        destStreet:
          type: string
          description: destination street address
          example: 'Paseo de Roxas'
        destCity:
          type: string
          description: source city
          example: 'Makati City'
        remarks:
          type: string
          description: additional remarks
          example: will buy groceries
    RapidPass:
      type: object
      allOf:
        - $ref: '#/components/schemas/CommonRapidPassFields'
        - properties:
            name:
              type: string
              description: name of the person the acess pass is assigned to (first name + last name + suffix)
            controlCode:
              type: string
              description: generated identifer for approved requests
            referenceId:
              type: string
              description: used for searching the access pass, either the plate number or ID of the individual
            status:
              type: string
              description: status of the access pass
              enum: [PENDING, APPROVED, DECLINED]
            validFrom:
              type: string
              description: start date of the access pass's validity period
              example: Sun Mar 29 10:28:57 GMT 2020
            validUntil:
              type: string
              description: expiration date of the access pass
              example: Web Apr 29 10:28:57 GMT 2020
            lastUsed:
              type: string
              description: date and time the QR code was used in a checkpoint
              example: Mon Mar 30 14:15:00 GMT 2020
    CommonRapidPassFields:
      type: object
      properties:
        aporType:
          type: string
          description: Code for Authorized Personnel Outside Residence. Check IATF doc for details.
          enum: [AG,BA,BP,CA,DC,DO,ER,FC,FS,GO,GR,HM,HT,IP,LW,ME,MS,MF,MT,PH,PM,PI,SH,SS,TF,UT,VE]
          example: "AG"
        passType:
          type: string
          description: type of pass, either VEHICLE or INDIVIDUAL
          enum:
            - INDIVIDUAL
            - VEHICLE
          example: INDIVIDUAL
        idType:
          type: string
          description: >-
            for vehicles this could be plate number or conduction sticker, for
            individuals this will be the type of ID, e.g. company ID, driver's
            license, etc.
          example: passport
        identifierNumber:
          type: string
          description: Identification number of individual
          example: 789921123QWRTY
        plateNumber:
          type: string
          description: plate number of vehicle, required only for vehicle registrations
          example: WNQ2412
    MobileDevice:
      type: object
      properties:
        imei:
          type: string
        brand:
          type: string
        model:
          type: string
        mobileNumber:
          type: string
        status:
          type: string
    QueryFilter:
      type: object
      description: optional filters for the records that will be returned by the operations
      properties:
        status:
          type: string
          description: not implemented yet
        validUntil:
          type: string
          description: not implemented yet
        pageNo:
          type: integer
          description: page number, starts with zero
        pageSize:
          type: integer
          description: number of records that will be returned, default of 25
    CheckpointAuthRequest:
      type: object
      description: The checkpoint authentication request
      properties:
        imei:
          type: string
          description: The device IMEI
          example: '990000862471854'
        masterKey:
          type: string
          description: The Master Key that is scanned from a QR Code
    CheckpointAuthResponse:
      type: object
      description: The response of valid checkpoint device authentication.
      properties:
        qrKey:
          type: string
          description: the secret needed to decode the QR Code
          example: supersecretkey
        accesCode:
          type: string
          description: the JSON Web Token required for the device to access the APIs
          example: abcdefghijkl.mnopqrst.uvwxyz
    DashboardAuthRequest:
      type: object
      description: The dashboard authentication request
      properties:
        username:
          type: string
          description: The username to login
          example: user
        password:
          type: string
          description: The password
          example: supersecurepassword
    DashboardAuthResponse:
      type: object
      description: The response when authentication is successful
      properties:
        accessCode:
          type: string
          description: A JSON Web Token that will be used to authenticate with the other API requests
          example: abcd.efgh.ijkl
