openapi: 3.0.0
servers:
  - url: /api/v1
info:
  description: >-
    This is the RapidPass API specification.
  version: "2.0.2"
  title: RapidPass API
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: inspector
    description: Endpoints for inspector/checkpoint app.
  - name: registration
    description: Endpoints for mobile registration app.
  - name: dashboard
    description: Endpoints for the dashboard/web console for the review and approval of requests (and administration of the RapidPass system).
  - name: public
    description: Publicly accessible endpoint
  - name: bulk
    description: bulk/batch operations
security:
  - ApiKeyAuth: []
paths:
  /lookup/apor:
    post:
      tags:
        - dashboard
      summary: Creates a new APOR type, or updates an existing APOR type.
      operationId: putApor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AporType'
      responses:
        200:
          description: >-
            Successfully created a new APOR type/updated an existing APOR type. Returns all existing APOR types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AporTypesResponse'
    get:
      tags:
        - dashboard
      summary: Retrieves all the APOR types.
      operationId: getAporLookup
      responses:
        200:
          description: >-
            Retrieves all the APOR types.
            content:
            application/json:
              schema:
                $ref: '#/components/schemas/AporTypesResponse'
  /lookup/apor/{aporType}:
    delete:
      tags:
        - dashboard
      summary: Deletes an existing APOR type.
      operationId: deleteAporLookup
      responses:
        200:
          description: >-
            Deletes an existing apor type. Returns all existing apor types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AporTypesResponse'
  /registry/auth:
    post:
      deprecated: true
      tags:
        - dashboard
      summary: >-
        Authentication for Dashboard users. This allows access to the APIs for
        approvals. [DEPRECATED]
      operationId: loginAgency
      description: >-
        Called from the dashboard. When successful, an Auth Token will be returned
        which can be used for the approvals API.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardAuthRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardAuthResponse'
        '401':
          description: Incorrect username or password
        '403':
          description: Bad Request
        '500':
          description: Internal Server Error
  /users/auth:
    post:
      tags:
        - dashboard
      summary: >-
        Authentication for Dashboard users. This allows access to the APIs for
        approvals.
      operationId: loginUser
      description: >-
        Called from the dashboard. When successful, an Auth Token will be returned
        which can be used for the approvals API.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardAuthRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardAuthResponse'
        '401':
          description: Incorrect username or password
        '403':
          description: Bad Request
        '500':
          description: Internal Server Error
  /users/{username}/change-password:
    post:
      parameters:
        - name: username
          in: path
          schema:
            type: string
          required: true
      tags:
        - dashboard
      summary: >-
        Allows an authenticated Dashboard user to change their password.
      operationId: changePassword
      description: >-
        Called from the dashboard. When successful, replaces the password of the user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrarUserChangePasswordRequest'
      responses:
        '200':
          description: Successfully changed user's password
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example:
                      Successfully changed your password.
        '400':
          description: Response when the old password supplied is incorrect.
          content:
            application/json:
              example:
                message: Failed to change password. The old password entered is incorrect.
        '401':
          description: Response when attempting to change the password of a user that is other than the currently logged in user.
          content:
            application/json:
              example:
                message: You are only allowed to change passwords for your account.
        '500':
          description: Internal Server Error
  /users/{username}/activate:
    post:
      tags:
        - dashboard
      summary: >-
        This activates a new user and sets the password for the user to be able
        to authorize and perform transactions
      operationId: activateUser
      description: >-
        This is called from the activation page which received the activation code
        from the user.
      parameters:
        - name: username
          description: The username of the user to activate
          in: path
          required: true
          schema:
            type: string
            example: doh@doh.gov
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserActivationRequest'
      responses:
        200:
          description: User activated
        400:
          description: Bad request, fields are required
        401:
          description: Unauthorized
        403:
          description: The user or the activation code does not match
        500:
          description: Internal Error
  /users/{username}/active:
    get:
      tags:
        - dashboard
      summary: >-
        Returns true if the user is active
      operationId: isUserActive
      description: >-
        This is called by the dashboard to check if user is already activated
      parameters:
        - name: username
          description: The username of the user to check
          in: path
          required: true
          schema:
            type: string
            example: doh@doh.gov
      responses:
        200:
          description: User is active or not
          content:
            application/json:
              schema:
                type: boolean
        400:
          description: Bad request, fields are required
        401:
          description: Unauthorized
        403:
          description: The user or the activation code does not match
        500:
          description: Internal Error
  /users/apor-types:
    get:
      tags:
        - dashboard
      summary:
        Retrieves the list of APOR Types associated with the logged in user. This list is set as keycloak user attributes.
      operationId: getUserAporTypes
      responses:
        '200':
          description: array of associated APOR types
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example: [ "MS", "ER" ]
        '404':
          description: not found
  /users/{username}/apor-types:
    get:
      deprecated: true
      tags:
        - dashboard
      summary:
        Retrieves the list of APOR Types associated with the user. Deprecated in favor of `/users/apor-types`
      operationId: getOldUserAporTypes
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
            example: doh@doh.gov
      responses:
        '200':
          description: not found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example: [ "MS", "ER" ]
        '404':
          description: not found
  /registry/access-passes/{referenceID}/control-code:
    get:
      parameters:
        - name: referenceID
          in: path
          schema:
            type: string
          required: true
      tags:
        - dashboard
      summary: >-
        Fetches the control code associated with a reference ID.
      operationId: getControlCode
      responses:
        '200':
          description: Successfully retrieved the control code.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ControlCodeResponse'
        '404':
          description: Did not find an access pass with the specified mobile number.
        '400':
          description: Successfully found an access pass, but it is not approved.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Successfully found an access pass with reference ID 09171234567, but it is not approved.
  /registry/access-passes:
    post:
      tags:
        - registration
        - dashboard
      summary:
        Create a request for a new access pass.
      operationId: requestAccessPass
      description: >
        Called from the registration or web site registration page to register a user.
        All new access passes will have a status of 'PENDING'.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RapidPassRequest'
        description: Rapid Pass request payload.
      responses:
        '201':
          description: Request created
          content:
            application/json:
              schema:
                type: object
                properties:
                  schema:
                    $ref: '#/components/schemas/RapidPass'
          links:
            GetAccessPassById:
              operationId: getAccessPassById
              parameters:
                referenceId: '$response.body#/referenceId'
        '400':
          description: Invalid Input
    get:
      tags:
        - dashboard
      summary: Gets a list of access passes.
      description:
        Retrieves a set of access passes based on the optional query parameters.  If there are no query parameters provide, a paginated list of access passes will be returned.
      parameters:

        - name: passType
          in: query
          required: false
          schema:
            type: string
          description: Filters retrieved access passes by Pass type. Can be "INDIVIDUAL" or "VEHICLE".
          example: INDIVIDUAL
        - name: aporType
          in: query
          required: false
          schema:
            type: string
          description: Filters retrieved access passes by Apor type. For possible values, trust the database
            definitions first-and-foremost. Note that {@link CommonRapidPassFields.AporTypeEnum} may
            potentially be outdated, as it is based on the OpenAPI Spec. Again, trust the db first and foremost.
          example: GOV
        - name: status
          in: query
          required: false
          schema:
            type: string
          description: Filters retrieved access passes by Status. Possible values are [PENDING, APPROVED, DECLINED,
            SUSPENDED].
          example: PENDING
        - name: plateNumber
          in: query
          required: false
          schema:
            type: string
          description: Filters retrieved access passes by Plate number.
        - name: company
          in: query
          required: false
          schema:
            type: string
          description: Filters retrieved access passes by Company.
          example: DevCon.ph
        - name: name
          in: query
          required: false
          schema:
            type: string
          description: Filters retrieved access passes by the name of owner of this rapid pass.
          example: Jose Rizal
        - name: source
          in: query
          required: false
          schema:
            type: string
          description: Filters retrieved access passes by the data source, whether registered one-at-a-time, or
            through the bulk registration process. Possible values are [ONLINE, BULK].
          example: ONLINE
        - name: pageNo
          in: query
          required: false
          schema:
            type: integer
          description: Used for pagination, specifies the page number that will be returned.  Page numbers start with zero.
        - name: maxPageRows
          in: query
          required: false
          schema:
            type: integer
          description: Used for pagination, the maximum number of records per page.  Defaults to 25.
      responses:
        '200':
          description: Status of the request pass
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedRapidPass'
  /registry/access-passes/{referenceID}/resend:
    post:
      operationId: resendAccessPass
      tags:
        - dashboard
      summary: Resends the RapidPass for the specified reference ID.
      parameters:
        - name: referenceID
          in: path
          description: >-
            Reference Number of access pass request.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: RapidPass email and sms has been queued for processing.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example:
                      RapidPass email and sms has been queued for processing.
        '404':
          description: There was no RapidPass found for the specified reference ID.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example:
                      There is no RapidPass found with reference ID `09171234567`
  /batch/approvers:
    post:
      operationId: batchRegisterApprovers
      tags:
        - bulk
      summary: Upload a CSV of new approvers to register.
      requestBody:
        content:
          description:
            example:
              Some example value here
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        200:
          description: Upload successful

  /batch/access-passes:
    get:
      tags:
        - dashboard
        - inspector
        - bulk
      summary:
        Download a list of access passes in CSV format.
      parameters:
        - name: lastSyncOn
          in: query
          description: 'indicates last sync of checkpoint device in Epoch format'
          required: true
          schema:
            type: integer
            format: int64
        - name: pageSize
          in: query
          description: 'size of page requested'
          required: false
          schema:
            type: integer
            format: int32
            default: 1000
        - name: pageNumber
          in: query
          description: 'page number requested'
          required: false
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        '200':
          description: json containing page metadata and csv data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedList'
    post:
      tags:
        - dashboard
        - bulk
      summary: Upload CSV file of pre-approved passes
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Upload successful
  '/batch/access-pass-events':
    get:
      tags:
        - inspector
        - bulk
      summary:
        Download the access pass event log starting from the specified event id.
      parameters:
        - name: fromEventID
          in: query
          description: 'starting point - event id'
          required: true
          schema:
            type: integer
            format: int64
        - name: pageSize
          in: query
          description: 'size of page requested'
          required: false
          schema:
            type: integer
            format: int32
            default: 1000
        - name: pageNumber
          in: query
          description: 'page number requested'
          required: false
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        '200':
          description: page metadata and array of values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedList'
  /batch/scanner-devices:
    post:
      tags:
        - dashboard
        - bulk
      summary: Upload CSV file mobile devices for registration.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Upload successful
  /registry/access-passes/{referenceID}:
    get:
      operationId: getAccessPassById
      tags:
        - inspector
        - registration
        - dashboard
      summary:
        Get more information about an existing access pass.
      parameters:
        - name: referenceID
          in: path
          description: >-
            Reference Number of access pass request.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: More information on control number
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RapidPass'
    put:
      tags:
        - dashboard
      summary: Update an existing access pass.
      parameters:
        - name: referenceID
          in: path
          description: >-
            Reference ID of the access pass request. This is the mobile number of the user.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RapidPassUpdateRequest'

      responses:
        '200':
          description: >-
            approves or declines the Rapid Pass Request with the same referenced ID and control number,
            this will generate a control code in system and send notifications to the Requestor
            along with QR code if the request is approved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RapidPass'
          links:
            GetAccessPassById:
              operationId: getAccessPassById
              parameters:
                referenceId: '$response.body#/referenceId'
    delete:
      tags:
        - dashboard
      summary: Suspends (revokes) an existing active access pass.
      parameters:
        - name: referenceID
          in: path
          description: >-
            Reference ID of the access pass request, mobile number for
            individuals and plate numbers for vehicles
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            approves the Rapid Pass Request with referenced reference Number.
            Will generate a control code in system and send notifications to
            Requestor along with QR code.

  /registry/access-passes/{referenceID}/status:
    get:
      operationId: getAccessPassStatusById
      tags:
        - registration
        - dashboard
      summary:
        Retrieves current status of access pass
      parameters:
        - name: referenceID
          in: path
          description: >-
            Reference Number of access pass request.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Current status of access pass
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string

  '/registry/qr-codes/{controlCode}':
    get:
      operationId: downloadRapidPassPdf
      tags:
        - inspector
        - registration
        - dashboard
        - public
      summary:
        Download the access pass PDF, which includes instructions and the QR data.
      description:
        This endpoint will only work if the access pass is APPROVED.
      parameters:
        - name: controlCode
          in: path
          description:
            The control code of the access pass (which is usually 8 characters).
          example:
            3A5B15V
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Base64-encoded string of the QR Code
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: reference number not found
  '/registry/qr-codes/{referenceId}/qr-code':
    get:
      operationId: downloadRapidPassQrImageDataBase64
      tags:
        - inspector
        - registration
        - dashboard
      summary:
        Retrieve the base 64 image data of the QR data of the specified access pass.
      description:
        Note that this endpoint will only work if the access pass is APPROVED.
      parameters:
        - name: referenceId
          in: path
          description:
            The reference ID of the access pass. For individual access passes, this is their mobile number. For
            vehicle passes, this is their plate number.
          example:
            3A5B15V
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Base64-encoded string of the QR Code
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: reference number not found
  '/checkpoint/update/':
    get:
      operationId: getLatestAppVersion
      tags:
        - inspector
      summary: Retrieves the latest version of the checkpoint app.
      responses:
        '200':
          description: The checkpoint user is properly authenticated and the latest version of the app is sent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckpointAppVersionResponse'
  '/checkpoint/download/{filename}':
    get:
      operationId: downloadSpecifiedFile
      parameters:
        - name: filename
          in: path
          description: >-
            The filename of the APK to be downloaded.
          example: checkpoint-app.v1.4.0.apk
          required: true
          schema:
            type: string
      tags:
        - inspector
      summary: Downloads the specified APK file of the checkpoint app.
      responses:
        '200':
          description: >-
            Downloads the APK of the specified version of the checkpoint app.
          content:
            application/binary:
              schema:
                description: Returns the APK of the app.
        '404':
          description: The file could not be found.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'File could not be found.'
  '/checkpoint/auth':
    post:
      operationId: checkpointAuth
      tags:
        - inspector
        - public
      deprecated: true
      summary: Authenticates a checkpoint device. Provides the encryption key and signing key to decode scanned QR data.
      description: This authenticates a scanner device, using the master key.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckpointAuthRequest'
      responses:
        '200':
          description: Successfully authenticated. The signing key, encryption key, access code, and the key validity
            date is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckpointAuthResponse'
        '400':
          description: Invalid request, because the IMEI and master key is required.
        '401':
          description: Unauthorized. Either the IMEI provide is not registered, the provided master key is wrong, or the provided master key is expired.
  '/checkpoint/register':
    post:
      operationId: registerNewDevice
      tags:
        - inspector
        - public
      summary: Registers a checkpoint device. Provides the encryption key and signing key to decode scanned QR data.
      description: This registers a new scanner device, if and only if you specify the correct master key. This will
        verify whether or not the scanner device is valid or not. If it is authorized, a new user will be created on
        Keycloak so that future requests can be authenticated on the checkpoint app.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckpointRegisterRequest'
      responses:
        '200':
          description: Successfully authenticated. The signing key, encryption key, access code, and the key validity
            date is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckpointRegisterResponse'
        '400':
          description: Invalid request, because one of the required fields are missing.
        '401':
          description: Unauthorized. The provided master key is wrong, the provided master key is expired, or the
            requested IMEI or device ID is not part of the pre-registered list of devices.

  '/checkpoint/access-passes/plate-numbers/{plateNo}:':
    get:
      operationId: verifyPlateNo
      tags:
        - inspector
        - public
      summary: Verify if the plate number is registered or not.
      parameters:
        - name: plateNo
          in: path
          description: >-
            Vehicle's plate number
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Rapid Pass retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RapidPass'
        '404':
          description: RapidPass not found using the plate number.

  '/checkpoint/access-passes/control-codes/{controlCode}':
    get:
      operationId: verifyControlCode
      tags:
        - inspector
        - public
      summary: Verify if the control code is valid or not.
      parameters:
        - name: controlCode
          in: path
          description: >-
            Vehicle's plate number
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Rapid Pass retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RapidPass'
        '404':
          description: RapidPass not found using the plate number.
  '/registry/scanner-devices':
    post:
      tags:
        - inspector
        - dashboard
      summary: Registers a new mobile device for use in checkpoints.
      description: These mobile devices are used by the inspectors at the checkpoint.
      operationId: registerScannerDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MobileDevice'
        description: mobile device configuration
      responses:
        '201':
          description: mobile device registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  deviceId:
                    type: string
          links:
            GetAccessPassById:
              operationId: getAccessPassById
              parameters:
                referenceId: '$response.body#/deviceId'
        '400':
          description: Invalid Input
    get:
      tags:
        - dashboard
      summary: Gets the list of devices
      operationId: getScannerDevices
      parameters:
        - name: id
          in: query
          schema:
            type: string
          required: false
          description: filter for `id`
        - name: brand
          in: query
          schema:
            type: string
          required: false
          description: filter for `brand`
        - name: mobile_number
          in: query
          schema:
            type: string
          required: false
          description: filter for `mobile_number`
        - name: model
          in: query
          schema:
            type: string
          required: false
          description: filter for `model`
      responses:
        200:
          description: list of filtered devices
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MobileDevice'
  '/registry/scanner-devices/{id}':
    delete:
      tags:
        - dashboard
      description: removes a device id from database
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: device id deleted from database
    put:
      tags:
        - dashboard
      description: updates a device id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MobileDevice'
      responses:
        204:
          description: device id updated
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: RP-API-KEY
  schemas:
    RapidPassRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/CommonRapidPassFields'
      properties:
        firstName:
          type: string
          description: The first name of the individual that will use the access pass
          example: Juan
        middleName:
          type: string
          description: The middle name of the individual that will use the access pass
          example: Mercedes
        lastName:
          type: string
          description: The last name of the individual that will use the access pass
          example: de la Cruz
        suffix:
          type: string
          description: The suffix of the individual that will use the access pass
          example: III
        company:
          type: string
          description: company of access pass holder
        mobileNumber:
          type: string
          description: mobile number of access pass holder. The mobile number should be in 09XXXXXXXXX format.
          example: '09662016319'
        email:
          type: string
          description: email address of access pass holder
          example: jdelacruz@some-email.com
        originName:
          type: string
          description: source company name
          example: Acme Inc.
        originStreet:
          type: string
          description: source street address
          example: '123 Somewhere Ave'
        originCity:
          type: string
          description: source city
          example: 'Makati City'
        destName:
          type: string
          description: destination location
          example: Zuelig Building
        destStreet:
          type: string
          description: destination street address
          example: 'Paseo de Roxas'
        destCity:
          type: string
          description: source city
          example: 'Makati City'
        remarks:
          type: string
          description: additional remarks
          example: will buy groceries
    RapidPass:
      type: object
      allOf:
        - $ref: '#/components/schemas/CommonRapidPassFields'
        - properties:
            name:
              type: string
              description: name of the person the acess pass is assigned to (first name + last name + suffix)
            controlCode:
              type: string
              description: generated identifer for approved requests
            referenceId:
              type: string
              description: used for searching the access pass, either the plate number or ID of the individual
            status:
              type: string
              description:
                The status of the access pass. Note that EXPIRED is not a valid status. To determine whether an access
                pass is expired, compute this using the current timestamp against the `validUntil` property of a `RapidPass`.
              enum: [PENDING, APPROVED, DECLINED, SUSPENDED]
            validFrom:
              type: string
              description: start date of the access pass's validity period
              example: 2020-04-02T18:49:31.129435Z
            validUntil:
              type: string
              description: expiration date of the access pass
              example: 2020-04-02T18:49:31.129435Z
            issuedBy:
              type: string
              description: The username (which is usually the email) of the approver who approved this RapidPass.
              example: dict@rapidpass.ph
    CommonRapidPassFields:
      type: object
      properties:
        aporType:
          type: string
          description: Code for Authorized Personnel Outside Residence. Check IATF doc for details.
          enum: [AG,BA,BP,CA,DC,DO,ER,FC,FS,GO,GR,HM,HT,IP,LW,ME,MS,MF,MT,PH,PM,PI,SH,SS,TF,UT,VE]
          example: "AG"
        passType:
          type: string
          description: The type of the pass either VEHICLE or INDIVIDUAL.
          enum:
            - INDIVIDUAL
            - VEHICLE
          example: INDIVIDUAL
        idType:
          type: string
          description:
            For vehicles, this could be `PLT` (plate number) or `CND` (conduction sticker). For individuals, this will
            be the type of ID. For example, `COM` (company ID), `LTO` (driver's license), etc. For a complete list of
            supported `idType`s, please see RapidPass backend slack channel.
          example: PLT
        identifierNumber:
          type: string
          description: Identification number of the individual.
          example: 789921123QWRTY
        plateNumber:
          deprecated: true
          type: string
          description:
            This field is used only for VEHICLE access passes. This is either the plate number or the conduction
            sticker ID of the vehicle. Deprecated, as vehicle passes are no longer used.
          example: WNQ2412
    MobileDevice:
      type: object
      properties:
        id:
          type: string
          description: The device IMEI/ID number
          example: '990000862471854'
        brand:
          type: string
        model:
          type: string
        mobileNumber:
          type: string
        status:
          type: string
    PagedRapidPass:
      type: object
      description: The response of a search query on the RapidPass endpoint.
      properties:
        currentPage:
          type: number
          description: The current page you are viewing. Note that this is 0-based counting.
          example: 0
        currentPageRows:
          type: number
          description: The number of rows available on this page. Note that this can potentially be less than the max
            number of rows in a page.
          example: 25
        totalPages:
          type: number
          description: The total number of pages available to be viewed.
          example: 1
        totalRows:
          type: number
          description: The max number of rows in a page.
          example: 25
        hasNext:
          type: boolean
          description: True, if and only if there is a next page of data.
          example: true
        hasPrevious:
          type: boolean
          description: True, if and only if there is a previous page of data.
          example: false
        lastPage:
          type: boolean
          description: True, if and only if this is the last page.
        firstPage:
          type: boolean
          description: True, if and only if this is the first page.
        rapidPassList:
          type: array
          items:
            $ref: '#/components/schemas/RapidPass'
    CheckpointAuthRequest:
      type: object
      description: The checkpoint authentication request.
      properties:
        imei:
          type: string
          description: The device IMEI. This will become the username that the user will buse to login via keycloak.
          example: '990000862471854'
        masterKey:
          type: string
          description: The Master Key that is scanned from a QR Code
    CheckpointAuthResponse:
      type: object
      description: The response of valid checkpoint device authentication.
      properties:
        signingKey:
          type: string
          description: the secret used to sign the QRs
          example: 0123456789ABCDEF
        encryptionKey:
          type: string
          description: the secret used to encrypt the QRs
          example: 0123456789ABCDEF
        accessCode:
          type: string
          description: the JSON Web Token required for the device to access the APIs
          example: abcdefghijkl.mnopqrst.uvwxyz
        validTo:
          type: string
          required: false
          description: >-
            Optional field that may or may not be included. If it is included, it means that that the server is
            informing the checkpoint app that the masterKey used to authenticate is about to expire. The timestamp
            provided is the date when it will stop working. The checkpoint app must download the latest version of the
            app for it to continue working- otherwise, the app will no longer be able to log in.
    CheckpointRegisterRequest:
      type: object
      description: The checkpoint registration request.
      properties:
        imei:
          required: false
          type: string
          description: The device IMEI.
          example: '990000862471854'
        deviceId:
          required: true
          type: string
          description: The unique device ID. This will become the username that the user will buse to login via keycloak.
          example: '1234567890'
        masterKey:
          type: string
          description: The Master Key that is scanned from a QR Code
        password:
          type: string
          description: The password that the user will be using to login via keycloak.
    KeyEntry:
      type: object
      description: Holds a set of encryption and master key values, including when those values will expire in validity.
      properties:
        signingKey:
          type: string
          description: the secret used to sign the QRs.
          example: 0123456789ABCDEF
        encryptionKey:
          type: string
          description: the secret used to encrypt the QRs.
          example: 0123456789ABCDEF
        validTo:
          type: string
          description: Date when this key will expire.
          example: '2020-05-12T08:00:00Z'
    CheckpointRegisterResponse:
      type: array
      description: The response of valid checkpoint device authentication.
      items:
        $ref: '#/components/schemas/KeyEntry'
    CheckpointAppVersionResponse:
      type: object
      description: The response for the latest app version for the checkpoint app.
      properties:
        file:
          type: string
          description: The filename of the latest APK.
          example: 'checkpoint-app.1.4.0.apk'
        version:
          type: string
          description: The latest version of the mobile app.
          example: '1.4.0'
        sha1:
          type: string
          description: Hash of the APK file.
          example: 'B10A8DB164E0754105B7A99BE72E3FE5'
    DashboardAuthRequest:
      type: object
      description: The dashboard authentication request
      properties:
        username:
          type: string
          description: The username to login
          example: user
        password:
          type: string
          description: The password
          example: supersecurepassword
    DashboardAuthResponse:
      type: object
      description: The response when authentication is successful
      properties:
        accessCode:
          type: string
          description: A JSON Web Token that will be used to authenticate with the other API requests
          example: abcd.efgh.ijkl
    UserActivationRequest:
      type: object
      description: An activation request for user
      properties:
        activationCode:
          type: string
          description: The activation code for the user
          example: AbCdEfG
        password:
          type: string
          description: The password for the user
          example: secure-password
    PagedList:
      type: object
      description: Paged CSV with meta data for client to know what page has been downloaded
      properties:
        meta:
          $ref: '#/components/schemas/PageMetaData'
        data:
          description: array of elements
          type: array
          items:
            type: array
            items: {}
    PageMetaData:
      description: Page Meta Data
      type: object
      properties:
        pageNumber:
          type: integer
        pageSize:
          type: integer
        totalPages:
          type: integer
        totalRows:
          type: integer
          format: int64
          description: total number of rows in whole dataset
        columnNames:
          type: array
          items:
            type: string
          example: ["eventID", "referenceID", "passType", "aporType", "controlCode",
                    "name", "plateNumber", "status", "validFrom", "validTo", "eventTimestamp"]
    RapidPassUpdateRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/CommonRapidPassFields'
        - properties:
            name:
              type: string
              description: name of the person the acess pass is assigned to (first name + last name + suffix)
            email:
              type: string
              description: the email of the person who owns the access pass.
            company:
              type: string
              description: name of the company of the access pass
            controlCode:
              type: string
              description: generated identifer for approved requests
            destName:
              type: string
              description: Destination Name
            destStreet:
              type: string
              description: Destination Street
            destCity:
              type: string
              description: Destination City
            destProvince:
              type: string
              description: Destination Province
            originName:
              type: string
              description: Origin Name
            originStreet:
              type: string
              description: Origin Street
            originCity:
              type: string
              description: Origin City
            originProvince:
              type: string
              description: Origin Province
            referenceId:
              type: string
              description: used for searching the access pass, either the plate number or ID of the individual
            status:
              type: string
              description:
                The status of the access pass that you wish to apply. Note that EXPIRED is not a valid status. To determine
                whether an access pass is expired, compute this using the current timestamp against the `validUntil`
                property of a `RapidPass`.
              enum: [PENDING, APPROVED, DECLINED, SUSPENDED]
            validFrom:
              type: string
              description: start date of the access pass's validity period
              example: 2020-04-02T18:49:31.129435Z
            validUntil:
              type: string
              description: expiration date of the access pass
              example: 2020-04-02T18:49:31.129435Z
            reasonForApplication:
              type: string
              description:
                The reason why the user applied for a rapid pass.
              example: Skeletal workforce.
            remarks:
              type: string
              description:
                The reason why the access pass was declined. Note that the `remarks` property of a `RapidPass` schema denotes
                the reason why they are requesting for a rapid pass, while the `updates` property of a `RapidPass` schema
                denotes the reason why their access pass was granted, declined, or revoked.
              example: Declining this request because the user did not complete the form.
      description: Modifies an existing access pass.
    LookupMap:
      type: object
      description: A map of lookup data
      additionalProperties:
        type: object
        description: A lookup data
        properties:
          value:
            type: string
            description: The value of a lookup data
            example: AG
          description:
            type: string
            description: The description of a lookup data
            example: Agribusiness & Agricultural Workers
    LookupOption:
      type: string
      description: The valid lookup options
      enum:
        - APOR
        - ID_TYPE_INDIVIDUAL
        - ID_TYPE_VEHICLE
    RegistrarUserChangePasswordRequest:
      type: object
      description: A json object that models a request to change a password.
      properties:
        currentPassword:
          type: string
          description: The user's current password.
        newPassword:
          type: string
          description: The user's desired new password.
    ControlCodeResponse:
      type: object
      properties:
        controlCode:
          type: string
          example: ABCDEFG1
    RevocationEvent:
      description: A revocation event
      example:
        controlCode: 35YBRZ6E
        timestamp: 1588599841
      properties:
        controlCode:
          description: The Control Code
          example: 35YBRZ6E
          type: string
        eventType:
          description: The event type, for now, only "RapidPassRevoked" is supported
          example: RapidPassRevoked
          type: string
        timestamp:
          description: The event timestamp, as seconds after epoch
          example: 1588599841
          type: integer
      required:
        - timestamp
        - controlCode
      title: RevocationEvent
      type: object
      x-struct: Elixir.RapidPassWeb.ApiSchema.RevocationEvent
    RevocationLog:
        description: The revoation log
        example:
          - controlCode: 35YBRZ6E
            timestamp: 1588599841
        items:
          "$ref": "#/components/schemas/RevocationEvent"
        title: RevocationLog
        type: array
        x-struct: Elixir.RapidPassWeb.ApiSchema.RevocationLog
    RevocationLogResponse:
      description: Response the validation logs
      example:
        data:
          - controlCode: 35YBRZ6E
            timestamp: 1588599841
      properties:
        data:
          "$ref": "#/components/schemas/RevocationLog"
      title: RevocationLogResponse
      type: object
      x-struct: Elixir.RapidPassWeb.ApiSchema.RevocationLogResponse
    AporType:
      description: An entry of an APOR type.
      example:
        aporCode: AG
        description: Agriculture
        approvingAgency: Department of Agriculture
      properties:
        aporCode:
          description: The APOR code
          example: AG
          type: string
        description:
          description: The full name of the APOR code
          example: Agriculture
          type: string
        approvingAgency:
          description: The name of the approving agency.
          example: Department of Agriculture
          type: string
    AporTypesResponse:
      description: Response for the list of apor types
      type: array
      items:
        "$ref": "#/components/schemas/AporType"